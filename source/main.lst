0001   0000             ;+==========================================================================-;
0002   0000             ; main.asm: Entry point
0003   0000             ;+==========================================================================-;
0004   0000             	.include	"macro.inc"
0001+  0000             #define LO_BYTE(value)	(value & $FF)
0002+  0000             #define HI_BYTE(value)	(value >> 8)
0005   0000             	.include	"system.inc"
0001+  0000             .nolist
0071+  0000             .list
0006   0000             	.include	"variables.inc"
0001+  0000             ;+==========================================================================-;
0002+  0000             ; variables.inc: variables
0003+  0000             ;+==========================================================================-;
0004+  0000             ;	VRAM regions
0005+  0000             TILE_VRAM	.equ	$1000
0006+  0000             SATB_VRAM	.equ	$7f00
0007+  0000             
0008+  0000             
0009+  0000             ;	Zero page variables
0010+  2000             		.org	$2000
0011+  2000             	
0012+  2000             ar_buf		.block	1	; buffer for vdc so interrupts don't mess us up
0013+  2001             frame_count	.block	1	; incremented each vblank
0014+  2002             _ax				; general purpose variables for parameters/scratchpad
0015+  2002             _al		.block	1
0016+  2003             _ah		.block	1
0017+  2004             _bx
0018+  2004             _bl		.block	1
0019+  2005             _bh		.block	1
0020+  2006             _cx
0021+  2006             _cl		.block	1
0022+  2007             _ch		.block	1
0023+  2008             _dx
0024+  2008             _dl		.block	1
0025+  2009             _dh		.block	1
0026+  200A             
0027+  200A             ;	Macro that uses ar_buf to set vdc register number
0028+  200A             #define	set_reg(reg_num)	lda	#reg_num
0029+  200A             #defcont			\ sta	ar_buf
0030+  200A             #defcont			\ st0	#reg_num
0031+  200A             	
0032+  200A             ;	Regular variables
0033+  2200             		.org	$2200
0034+  2200             		
0035+  2200             satb_buf	.block	512	; SATB buffer
0036+  2400             satb_buf_end
0007   2400             
0008   E000             	.org	$e000
0009   E000             	.include	"graphics.asm"
0001+  E000             bg_pal
0002+  E000 00 00 FA 01 	.incbin	"bg.pal"
0002+  E004 38 00 EF 00 
0002+  E008 97 01 83 01 
0002+  E00C 39 01 00 00 
0002+  E010 00 00 00 00 
0002+  E014 00 00 00 00 
0002+  E018 00 00 00 00 
0002+  E01C 00 00 00 00 
0003+  E020             bg_pal_end
0004+  E020             bg_tile
0005+  E020 00 00 00 00 	.incbin	"bg.tle"
0005+  E024 00 00 00 00 
0005+  E028 00 00 00 00 
0005+  E02C 00 00 00 00 
0005+  E030 00 00 00 00 
0005+  E034 00 00 00 00 
0005+  E038 00 00 00 00 
0005+  E03C 00 00 00 00 
0005+  E040 00 00 44 00 
0005+  E044 00 00 00 00 
0005+  E048 18 00 00 00 
0005+  E04C 7C 00 00 00 
0005+  E050 00 00 00 00 
0005+  E054 00 00 00 00 
0005+  E058 18 00 00 00 
0005+  E05C 00 00 00 00 
0005+  E060 00 00 00 44 
0005+  E064 00 00 00 00 
0005+  E068 18 98 08 4A 
0005+  E06C 00 7C 00 00 
0005+  E070 00 00 00 00 
0005+  E074 00 00 00 00 
0005+  E078 80 00 42 00 
0005+  E07C 7C 00 00 00 
0005+  E080 3E 00 86 00 
0005+  E084 F2 00 F8 00 
0005+  E088 3E 00 9E 80 
0005+  E08C F6 F0 FE FE 
0005+  E090 FE 00 FE 00 
0005+  E094 FE 00 FE 00 
0005+  E098 FE 00 7E 00 
0005+  E09C 0E 00 00 00 
0006+  E0A0             bg_tile_end
0007+  E0A0             
0008+  E0A0             catboy_tile
0009+  E0A0 FE FF FE FF 	.incbin	"catboy.spr"
0009+  E0A4 FE FF FE FF 
0009+  E0A8 FE FF FE FF 
0009+  E0AC FE FF FE FF 
0009+  E0B0 BE DF 7E EF 
0009+  E0B4 7E E7 7E E2 
0009+  E0B8 3E E0 1E C0 
0009+  E0BC 0E C0 1E 80 
0009+  E0C0 FE FF FE FF 
0009+  E0C4 FE FF FE FF 
0009+  E0C8 FE FF FE FF 
0009+  E0CC FE FF FE FF 
0009+  E0D0 BE DF 3E CF 
0009+  E0D4 3E D7 BE DA 
0009+  E0D8 3E D0 1E E0 
0009+  E0DC 0E C0 1E 80 
0009+  E0E0 00 00 00 00 
0009+  E0E4 00 00 00 00 
0009+  E0E8 00 00 00 00 
0009+  E0EC 00 00 00 00 
0009+  E0F0 00 00 00 00 
0009+  E0F4 00 00 00 00 
0009+  E0F8 00 00 00 00 
0009+  E0FC 00 00 00 00 
0009+  E100 00 00 00 00 
0009+  E104 00 00 00 00 
0009+  E108 00 00 00 00 
0009+  E10C 00 00 00 00 
0009+  E110 00 00 00 00 
0009+  E114 00 00 00 00 
0009+  E118 00 00 00 00 
0009+  E11C 00 00 00 00 
0009+  E120 06 80 8E C0 
0009+  E124 5E 00 26 00 
0009+  E128 06 00 06 00 
0009+  E12C 0E 13 0E A0 
0009+  E130 3E C1 BE 61 
0009+  E134 3E 00 1E C0 
0009+  E138 0E 82 0E 87 
0009+  E13C 06 07 02 07 
0009+  E140 06 80 0E C1 
0009+  E144 1E 0B 66 CB 
0009+  E148 D6 CF 96 C7 
0009+  E14C 36 60 0E 80 
0009+  E150 BE C0 3E 60 
0009+  E154 3E 00 DE DC 
0009+  E158 CE BA 6E B7 
0009+  E15C 06 07 02 07 
0009+  E160 00 00 00 00 
0009+  E164 00 00 00 00 
0009+  E168 00 00 00 00 
0009+  E16C 00 00 00 00 
0009+  E170 00 00 00 00 
0009+  E174 00 00 00 00 
0009+  E178 00 00 00 00 
0009+  E17C 00 00 00 00 
0009+  E180 00 00 00 00 
0009+  E184 00 00 00 00 
0009+  E188 00 00 00 00 
0009+  E18C 00 00 00 00 
0009+  E190 00 00 00 00 
0009+  E194 00 00 00 00 
0009+  E198 00 00 00 00 
0009+  E19C 00 00 00 00 
0010+  E1A0             catboy_tile_end
0010   E1A0             	
0011   E1A0             init
0012   E1A0 78          	sei	; disable all interrupts
0013   E1A1 D4          	csh	; run at 7 mhz
0014   E1A2 D8          	cld	; disable bcd
0015   E1A3 A9 FF       	lda	#$ff
0016   E1A5 AA          	tax
0017   E1A6 9A          	txs	; init stack pointer
0018   E1A7 53 01       	tam0	; i/o in bank 0
0019   E1A9 A9 F8       	lda	#$f8
0020   E1AB 53 02       	tam1	; ram in bank 1
0021   E1AD             
0022   E1AD             ;	Video init
0023   E1AD 20 30 E2    	jsr	vdc_init
0024   E1B0 A9 04       	lda	#%00000100	; low-res, sharper video
0025   E1B2 8D 00 04    	sta	vce_ctrl
0026   E1B5             
0027   E1B5             ;	Enable interrupts
0028   E1B5 9C 03 14    	stz	irq_dis
0029   E1B8 58          	cli
0030   E1B9             
0031   E1B9             ;	Clear SATB buffer
0032   E1B9 9C 00 22    	stz	satb_buf
0033   E1BC 73 00 22 01 	tii	satb_buf, satb_buf + 1, (satb_buf_end - satb_buf) - 1
0033   E1C0 22 FF 01 
0034   E1C3             
0035   E1C3 9C 02 04    	stz	vce_adrl
0036   E1C6 9C 03 04    	stz	vce_adrh
0037   E1C9 E3 00 E0 04 	tia	bg_pal, vce_datl, (bg_pal_end - bg_pal)
0037   E1CD 04 20 00 
0038   E1D0             	
0039   E1D0 9C 02 04    	stz	vce_adrl
0040   E1D3 A9 01       	lda	#$1
0041   E1D5 8D 03 04    	sta	vce_adrh
0042   E1D8 E3 00 E0 04 	tia	bg_pal, vce_datl, (bg_pal_end - bg_pal)
0042   E1DC 04 20 00 
0043   E1DF             	
0044   E1DF A9 00       	set_reg(mawr)
0044   E1E1 85 00       
0044   E1E3 03 00       
0045   E1E5 13 00       	st1	#0
0046   E1E7 23 00       	st2	#0
0047   E1E9 A9 02       	set_reg(vwr)
0047   E1EB 85 00       
0047   E1ED 03 02       
0048   E1EF A9 00       	lda	#$00
0049   E1F1 8D 02 00    	sta	vdc_lo
0050   E1F4 A9 01       	lda	#$1
0051   E1F6 8D 03 00    	sta	vdc_hi
0052   E1F9 A9 01       	lda	#$01
0053   E1FB 8D 02 00    	sta	vdc_lo
0054   E1FE A9 01       	lda	#$1
0055   E200 8D 03 00    	sta	vdc_hi
0056   E203 A9 02       	lda	#$02
0057   E205 8D 02 00    	sta	vdc_lo
0058   E208 A9 01       	lda	#$1
0059   E20A 8D 03 00    	sta	vdc_hi
0060   E20D A9 03       	lda	#$03
0061   E20F 8D 02 00    	sta	vdc_lo
0062   E212 A9 01       	lda	#$1
0063   E214 8D 03 00    	sta	vdc_hi
0064   E217             	
0065   E217 A9 00       	set_reg(mawr)
0065   E219 85 00       
0065   E21B 03 00       
0066   E21D 13 00       	st1	#LO_BYTE(TILE_VRAM)
0067   E21F 23 10       	st2	#HI_BYTE(TILE_VRAM)
0068   E221 A9 02       	set_reg(vwr)
0068   E223 85 00       
0068   E225 03 02       
0069   E227             	; tia	bg_tile, vdc_lo, (bg_tile_end - bg_tile)
0070   E227 E3 A0 E0 02 	tia	catboy_tile, vdc_lo, (catboy_tile_end - catboy_tile)
0070   E22B 00 00 01 
0071   E22E             	
0072   E22E             
0073   E22E             loop
0074   E22E 80 FE       	bra	loop
0075   E230             
0076   E230             
0077   E230             ;	Init VDC from table
0078   E230             vdc_init
0079   E230 82          	clx
0080   E231             _init_loop
0081   E231 BD 4B E2    	lda	vdc_table, x
0082   E234 30 14       	bmi	_done_init	; branch when we hit the $ff at end of table
0083   E236 8D 00 00    	sta	vdc_ar		; register number
0084   E239 E8          	inx
0085   E23A BD 4B E2    	lda	vdc_table, x
0086   E23D 8D 02 00    	sta	vdc_lo		; low byte of register
0087   E240 E8          	inx
0088   E241 BD 4B E2    	lda	vdc_table, x
0089   E244 8D 03 00    	sta	vdc_hi		; high byte of register
0090   E247 E8          	inx
0091   E248 80 E7       	bra	_init_loop
0092   E24A             _done_init
0093   E24A 60          	rts
0094   E24B             
0095   E24B             
0096   E24B             ;	VDC initial register table
0097   E24B             vdc_table
0098   E24B 05          	.byte	cr	; Control register
0099   E24C             			; Enable BG, sprites, vblank interrupt
0100   E24C C8 00       	.word	%0000000011001000
0101   E24E 06          	.byte	rcr	; Raster control register
0102   E24F 00 00       	.word	$0
0103   E251 07          	.byte	bxr	; BG X scroll
0104   E252 00 00       	.word	$0
0105   E254 08          	.byte	byr	; BG Y scroll
0106   E255 00 00       	.word	$0
0107   E257 09          	.byte	mwr	; Memory access width register
0108   E258 50 00       	.word	$50	; 64x64 tile BG
0109   E25A 0A          	.byte	hsr	; Horizontal sync register
0110   E25B 02 02       	.word	$0202	; 256x224 display
0111   E25D 0B          	.byte	hdr	; Horizontal display register
0112   E25E 1F 03       	.word	$031f	; 256x224 display
0113   E260 0C          	.byte	vpr	; Vertical sync register
0114   E261 02 13       	.word	$1302	; 256x224 display
0115   E263 0D          	.byte	vdr	; Vertical display register
0116   E264 DF 00       	.word	$00df	; 256x224 display
0117   E266 0E          	.byte	vcr	; Vertical display end pos register
0118   E267 03 00       	.word	$3	; 256x224 display
0119   E269 0F          	.byte	dcr	; DMA control register
0120   E26A 10 00       	.word	$10	; DMA VRAM to SATB each vblank
0121   E26C 13          	.byte	dvssr	; DMA VRAM - SATB source register
0122   E26D 00 7F       	.word	SATB_VRAM	; SATB at 7f00 in vram
0123   E26F FF          	.byte	$ff	; End of table
0124   E270             
0125   E270             	
0126   E270             no_int
0127   E270 40          	rti
0128   E271             
0129   E271             	
0130   E271             vdc_int
0131   E271             ;	save state
0132   E271 48          	pha
0133   E272 DA          	phx
0134   E273 5A          	phy
0135   E274             ;
0136   E274 AD 00 00    	lda	vdc_ar	; acknowledge interrupt
0137   E277 E6 01       	inc	frame_count
0138   E279             	
0139   E279             ;	copy satb buffer to vram
0140   E279 03 00       	st0	#mawr	; set up address to copy
0141   E27B 13 00       	st1	#LO_BYTE(SATB_VRAM)
0142   E27D 23 7F       	st2	#HI_BYTE(SATB_VRAM)
0143   E27F 03 02       	st0	#vwr	; write to vram
0144   E281 E3 00 22 02 	tia	satb_buf, vdc_lo, (satb_buf_end - satb_buf)
0144   E285 00 00 02 
0145   E288             
0146   E288             ;	reset VDC address register
0147   E288 A5 00       	lda	ar_buf
0148   E28A 8D 00 00    	sta	vdc_ar
0149   E28D             ;
0150   E28D             ;	restore state
0151   E28D 7A          	ply
0152   E28E FA          	plx
0153   E28F 68          	pla
0154   E290 40          	rti
0155   E291             	
0156   FFF6             	.org	$fff6
0157   FFF6             vectors
0158   FFF6 70 E2       	.word	no_int	; IRQ2 vector (BRK)
0159   FFF8 71 E2       	.word	vdc_int	; IRQ1 vector (VDC)
0160   FFFA 70 E2       	.word	no_int	; Timer vector
0161   FFFC 70 E2       	.word	no_int	; NMI vector (unused)
0162   FFFE A0 E1       	.word	init	; Reset vector
0163   10000             	
0164   10000             	.end
tasm: Number of errors = 0
